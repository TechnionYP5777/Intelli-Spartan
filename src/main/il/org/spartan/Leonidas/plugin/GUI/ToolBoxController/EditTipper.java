package il.org.spartan.Leonidas.plugin.GUI.ToolBoxController;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import il.org.spartan.Leonidas.plugin.Toolbox;
import il.org.spartan.Leonidas.plugin.leonidas.Leonidas;
import il.org.spartan.Leonidas.plugin.leonidas.LeonidasUtils;
import il.org.spartan.Leonidas.plugin.tippers.leonidas.LeonidasTipperDefinition;
import org.reflections.Reflections;

import javax.swing.*;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.lang.annotation.Annotation;
import java.lang.reflect.Field;
import java.lang.reflect.Method;
import java.util.List;

/**
 * @author Amir Sagiv, Anna Belozovsky
 * @since 14-05-2017
 */
public class EditTipper extends JFrame {
    private JPanel mainPanel;
    private JButton applyButton;
    private JButton closeButton;
    private JPanel tempPane;
    private JScrollPane TablePanel;
    private JLabel nameLabel;
    private LeonidasUtils tipperAnnotation;
    private ComponentJTable table;
    private Object currentTip;

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    public EditTipper(String tipperName) {
        super("Edit Tipper");
        nameLabel.setText(tipperName);
        currentTip = null;
        List<Object> tipperInstances = Toolbox.getInstance().getAllTipperInstances();
        for (Object tip : tipperInstances) {
            //           JOptionPane.showMessageDialog(this, tip.getClass().getSimpleName() + ", " + tipperName);
            if (tip.getClass().getSimpleName().equals(tipperName)) {
                currentTip = tip;
                break;
            }
        }

        // if instance wasn't found
        if (currentTip == null) {
            return;
        }

        table = new ComponentJTable();
        Field[] fields = currentTip.getClass().getDeclaredFields();
        ((DefaultTableModel) table.getModel()).setRowCount(fields.length);
        int i = 0;
        for (Field field : fields) {
            if (!field.isAnnotationPresent(LeonidasUtils.class)) {
                continue;
            }
            Class type = field.getType();
            try {
                if (type.isPrimitive() && type.getName().equals("boolean")) {
                    table.getModel().setValueAt(new JLabel(field.getName()), i, 0);
                    table.getModel().setValueAt(new JCheckBox("", (Boolean) field.get(currentTip)), i++, 1);
                    continue;
                }
                Object obj = type.newInstance();
                if (obj instanceof String) {

                    table.getModel().setValueAt(new JLabel(field.getName()), i, 0);
                    table.getModel().setValueAt(new JTextField((String) field.get(currentTip)), i++, 1);
                }
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        applyButton.addActionListener(e -> applyListener(tipperAnnotation));
        closeButton.addActionListener(e -> {
            this.dispose();
        });
        TablePanel.setViewportView(table);
        setContentPane(mainPanel);
        setPreferredSize(new Dimension(800, 600));
        setResizable(false);
        pack();
        setVisible(true);
    }

    private void applyListener(Annotation annotation) {
        Field[] fields = currentTip.getClass().getDeclaredFields();
        for (Field field : fields) {
            for (int i = 0; i < this.table.getModel().getRowCount(); i++) {
                if (!((JLabel) this.table.getModel().getValueAt(i, 0)).getText()
                        .equals(field.getName())) {
                    continue;
                }
                if (this.table.getModel().getValueAt(i, 1) instanceof JCheckBox) {
                    try {
                        field.set(currentTip, ((JCheckBox) this.table.getModel().getValueAt(i, 1)).isSelected());
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }
                if (this.table.getModel().getValueAt(i, 1) instanceof JTextField) {
                    try {
                        field.set(currentTip, ((JTextField) this.table.getModel().getValueAt(i, 1)).getText());
                    } catch (IllegalAccessException e) {
                        e.printStackTrace();
                    }
                }

            }
        }
        //List<Object> l = Toolbox.getInstance().getAllTipperInstances();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        final JLabel label1 = new JLabel();
        label1.setFont(new Font(label1.getFont().getName(), label1.getFont().getStyle(), 28));
        label1.setText("Label");
        mainPanel.add(label1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tempPane = new JPanel();
        tempPane.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(tempPane, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        TablePanel = new JScrollPane();
        tempPane.add(TablePanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_SOUTH, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        applyButton = new JButton();
        applyButton.setText("Button");
        panel1.add(applyButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_EAST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        closeButton = new JButton();
        closeButton.setText("Button");
        panel1.add(closeButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
